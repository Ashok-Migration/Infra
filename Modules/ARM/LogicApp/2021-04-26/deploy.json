{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "storageAccountName": {
          "type": "string",
          "maxLength": 24,
          "metadata": {
              "description": "Required. Name of the Storage Account."
          }
      },
      "folderName": {
        "type": "string",
        "metadata": {
          "description": "Required. Name of the Folder."
        }
      },
      "workflowName": {
        "type": "string",
        "metadata": {
          "description": "Required. Name of the workflow."
        }
      },
      "workflowLocation": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Optional. Location for all resources."
        }
      },
      "workflowSchema": {
        "type": "string",
        "metadata": {
          "description": "Required."
        }
      },
      "workflowTriggers": {
        "type": "object",
        "defaultValue": {},
        "metadata": {
          "description": "Optional."
        }
      },
      "workflowActions": {
        "type": "object",
        "defaultValue": {},
        "metadata": {
          "description": "Optional."
        }
      },
      "workflowParameters": {
        "type": "object",
        "defaultValue": {},
        "metadata": {
          "description": "Optional."
        }
      },
      "logicAppState": {
        "type": "string",
        "defaultValue": "Enabled",
        "metadata": {
          "description": "Optional."
        }
      },
      "connectionParameters": {
        "type": "object",
        "defaultValue": {},
        "metadata": {
          "description": "Optional."
        }
      },
      "diagnosticLogsRetentionInDays": {
        "type": "int",
        "defaultValue": 365,
        "minValue": 0,
        "maxValue": 365,
        "metadata": {
          "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
        }
      },
      "diagnosticStorageAccountId": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Optional. Resource identifier of the Diagnostic Storage Account."
        }
      },
      "workspaceId": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Optional. Resource identifier of Log Analytics."
        }
      },
      "eventHubAuthorizationRuleId": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
        }
      },
      "eventHubName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
        }
      },
      "tags": {
        "type": "object",
        "defaultValue": {},
        "metadata": {
          "description": "Optional. Tags of the Logic App resource."
        }
      },
      "logAnalytics": {
        "type": "string",
        "defaultValue": {},
        "metadata": {
          "description": "Required. Log Analytics Workspace Name."
        }
      },
      "logAnalyticsRG": {
        "type": "string",
        "defaultValue": {},
        "metadata": {
          "description": "Optional. Log Analytics Resource Group."
        }
      },
      "subscriptionId": {
        "type": "string",
        "defaultValue": {},
        "metadata": {
          "description": "Optional. Log Analytics Subscription Id."
        }
      }
    },
    "variables": {
      "cleanStorageAccountName": "[replace(tolower(parameters('storageAccountName')), '-', '')]",
      "diagnosticsMetrics": [
        {
          "category": "AllMetrics",
          "enabled": true,
          "retentionPolicy": {
            "days": "[parameters('diagnosticLogsRetentionInDays')]",
            "enabled": true
          }
        }
      ],
      "diagnosticsLogs": [
        {
          "category": "WorkflowRuntime",
          "enabled": true,
          "retentionPolicy": {
            "days": "[parameters('diagnosticLogsRetentionInDays')]",
            "enabled": true
          }
        }
      ]
    },
    "resources": [
      {
        "apiVersion": "2016-10-01",
        "name": "[parameters('workflowName')]",
        "type": "Microsoft.Logic/workflows",
        "location": "[parameters('workflowLocation')]",
        "tags": "[parameters('tags')]",
        "properties": {
            "definition": {
                "$schema": "[parameters('workflowSchema')]",
                "actions": {
                    "Compose": {
                        "inputs": "@body('Parse_JSON')",
                        "runAfter": {
                            "Parse_JSON": [
                                "Succeeded"
                            ]
                        },
                        "type": "Compose"
                    },
                    "Initialize_FilePath_object": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "FilePath",
                                    "type": "object",
                                    "value": {
                                        "file": "@concat('https://',variables('StorageAccountName'),'.blob.core.windows.net',body('Insert_Data_Into_Blob_Storage')?['Path'])"
                                    }
                                }
                            ]
                        },
                        "runAfter": {
                            "Insert_Data_Into_Blob_Storage": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable"
                    },
                    "Initialize_StorageAccountName_String": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "StorageAccountName",
                                    "type": "string",
                                    "value": "[parameters('storageAccountName')]"
                                }
                            ]
                        },
                        "runAfter": {
                            "Initialize_TodayTime_Variable": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable"
                    },
                    "Initialize_FolderName_String": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "FolderName",
                                    "type": "string",
                                    "value": "[parameters('folderName')]"
                                }
                            ]
                        },
                        "runAfter": {
                            "Initialize_StorageAccountName_String": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable"
                    },
                    "Initialize_TodayTime_Variable": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "TodayTime",
                                    "type": "string",
                                    "value": "@{utcNow('yyyy-MM-ddTHH:mm:ss')}"
                                }
                            ]
                        },
                        "runAfter": {
                            "Compose": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable"
                    },
                    "Insert_Data_Into_Blob_Storage": {
                        "inputs": {
                            "body": "@outputs('Compose')",
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['apicon-cpp-prdt-ipam-pre-we-01']['connectionId']"
                                }
                            },
                            "method": "post",
                            "path": "/datasets/default/files",
                            "queries": {
                                "folderPath": "@concat('/',variables('FolderName'))",
                                "name": "@{concat('ADB2C-Metering-',formatDateTime(utcNow(),'yyyy-MM'),'.dat')}",
                                "queryParametersSingleEncoded": true
                            }
                        },
                        "runAfter": {
                            "Initialize_FolderName_String": [
                                "Succeeded"
                            ]
                        },
                        "runtimeConfiguration": {
                            "contentTransfer": {
                                "transferMode": "Chunked"
                            }
                        },
                        "type": "ApiConnection"
                    },
                    "Parse_JSON": {
                        "inputs": {
                            "content": "@body('Run_query_and_list_results')",
                            "schema": {
                                "properties": {
                                    "value": {
                                        "items": {
                                            "properties": {
                                                "application_id": {
                                                    "type": "string"
                                                },
                                                "number_of_active_users": {
                                                    "type": "integer"
                                                },
                                                "unit_type": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "application_id",
                                                "number_of_active_users",
                                                "unit_type"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "runAfter": {
                            "Run_query_and_list_results": [
                                "Succeeded"
                            ]
                        },
                        "type": "ParseJson"
                    },
                    "Publish_Event": {
                        "inputs": {
                            "body": [
                                {
                                    "data": "@variables('FilePath')",
                                    "dataVersion": "1.0",
                                    "eventTime": "@variables('TodayTime')",
                                    "eventType": "identity-metering",
                                    "id": "@{guid()}",
                                    "metadataVersion": "1",
                                    "subject": "Identity",
                                    "topic": "meteringdata"
                                }
                            ],
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['apicon-cpp-apps-integd-pre-we-01']['connectionId']"
                                }
                            },
                            "method": "post",
                            "path": "/eventGrid/api/events"
                        },
                        "runAfter": {
                            "Initialize_FilePath_object": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnection"
                    },
                    "Run_query_and_list_results": {
                        "inputs": {
                            "body": "let TempLastMonthEndDate = (startofmonth(now()) - 1h);\nlet LastMonthStartDate = startofmonth(TempLastMonthEndDate);\nlet LastMonthEndDate = TempLastMonthEndDate+59m+59s;\n AuditLogs\n| where LoggedByService == \"B2C\"\n    and Result == \"success\"\n    and Category == \"Authentication\"\n    and OperationName in (\"Issue an id_token to the application\", \"Exchange token\", \"Issue an authorization code to the application\", \"Issue an access token to the //application\")\n    and tostring(AdditionalDetails[1][\"value\"]) has \"signup_signin\"\n  and TimeGenerated between(LastMonthStartDate .. LastMonthEndDate)\n| extend UserId = extractjson(\"$.[0].id\", tostring(TargetResources))\n| extend application_id = tostring(AdditionalDetails[1][\"value\"])\n| extend unit_type = \"count\"\n| order by TimeGenerated desc\n| summarize TotalAuth = count() by UserId , application_id, unit_type\n| summarize number_of_active_users = count() by application_id, unit_type\n| order by application_id desc\n",
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['apicon-cpp-apps-monitor-pre-we-01']['connectionId']"
                                }
                            },
                            "method": "post",
                            "path": "/queryData",
                            "queries": {
                                "resourcegroups": "[parameters('logAnalyticsRG')]",
                                "resourcename": "[parameters('logAnalytics')]",
                                "resourcetype": "Log Analytics Workspace",
                                "subscriptions": "[parameters('subscriptionId')]",
                                "timerange": "Set in query"
                            }
                        },
                        "runAfter": {},
                        "type": "ApiConnection"
                    }
                },
                "contentVersion": "1.0.0.0",
                "outputs": {},
                "parameters": "[parameters('workflowParameters')]",
                "triggers": "[parameters('workflowTriggers')]"
            },
            "parameters": "[parameters('connectionParameters')]",
            "state": "[parameters('logicAppState')]"
        },
        "resources": [
          {
            "type": "Microsoft.Logic/workflows/providers/diagnosticsettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(parameters('workflowName'), '/Microsoft.Insights/service')]",
            "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
            "dependsOn": [
              "[concat('Microsoft.Logic/workflows/', parameters('workflowName'))]"
            ],
            "properties": {
              "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
              "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
              "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
              "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
              "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
              "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
            }
          }
        ]
      }
    ],
    "outputs": {
      "LogicAppRegion": {
        "type": "string",
        "value": "[parameters('workflowLocation')]",
        "metadata": {
          "description": "The Region of the LogicApp."
        }
      },
      "LogicAppResourceGroup": {
        "type": "string",
        "value": "[resourceGroup().name]",
        "metadata": {
          "description": "The name of the Resource Group the LogicApp was created in."
        }
      }
    },
    "functions": []
  }