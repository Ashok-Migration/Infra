parameters:
  moduleName: AzureBastion
  templateFile: $(modulePath)/deploy.json
  parametersFile: $(modulePath)/Parameters/parameters.json

jobs:
- job:
  displayName: Validate ${{ parameters.moduleName }}
  pool:
    ${{ if eq(variables['vmImage'], '') }}:
      name: $(poolName)
    ${{ if eq(variables['poolName'], '') }}:
      vmImage: $(vmImage)
  variables:
  - template: pipeline.variables.yml
  steps:
    - task: PowerShell@2
      displayName: Test Module $(moduleName) (Pester)
      inputs:
        targetType: inline
        script: |
          Install-Module Pester -Force -ErrorAction Stop

          Write-Output "Template: ${{ parameters.templateFile }}"
          Write-Output "Parameters: ${{ parameters.parametersFile }}"

          $PesterSettings  = @{
            Script       = "$(System.DefaultWorkingDirectory)/$(modulePath)/Tests/*.tests.ps1"
            OutputFile   = "$(Agent.WorkFolder)/testsresult.xml"
            OutputFormat = "NUnitXml"
            EnableExit   = $true
            Verbose      = $true
          }

          Invoke-Pester @PesterSettings
          
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: $(Agent.WorkFolder)/testsresult.xml

    - task: AzurePowerShell@4
      displayName: 'Validate $(moduleName) in $(resourceGroupName) via $(serviceconnection)'
      inputs:
        azureSubscription: $(serviceConnection)
        ScriptType: InlineScript
        azurePowerShellVersion: LatestVersion
        inline: |
          if (-not (Get-AzResourceGroup -Name $(resourceGroupName) -ErrorAction SilentlyContinue)) {
            New-AzResourceGroup -Name $(resourceGroupName) -Location "$(location)"
          }

          $DeploymentInputs = @{
            ResourceGroupName     = "$(resourceGroupName)"
            TemplateFile          = "$(Build.Repository.LocalPath)/${{ parameters.templateFile }}"
            TemplateParameterFile = "$(Build.Repository.LocalPath)/${{ parameters.parametersFile }}"
            Mode                  = "Incremental"
            Verbose               = $true
            ErrorAction           = "Stop"
            #Tags                  = (if ('$(removeDeployment)' -eq 'true') { @{ moduleName="$(moduleName)"; moduleVersion="$(moduleVersion)" } } else {@{}})
          }
          
          if ('$(removeDeployment)' -eq 'true') {
            Write-Output "Because the subsequent removal is enabled after the Module $(moduleName) has been deployed, the following tags (moduleName: $(moduleName) and moduleVersion: $(moduleVersion)) are now set on the resource."
            Write-Output "This is necessary so that the later running Removal Stage can remove the corresponding Module from the Resource Group again."
            $DeploymentInputs += @{ Tags = @{ moduleName = "$(moduleName)"; moduleVersion = "$(moduleVersion)" } }
          }
          else { @{ } }

          Test-AzResourceGroupDeployment @DeploymentInputs
