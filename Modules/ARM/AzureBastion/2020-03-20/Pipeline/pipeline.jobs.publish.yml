parameters:
  moduleName: AzureBastion

jobs:
- job:
  displayName: Publish ${{ parameters.moduleName }}
  pool:
    ${{ if eq(variables['vmImage'], '') }}:
      name: $(poolName)
    ${{ if eq(variables['poolName'], '') }}:
      vmImage: $(vmImage)
  variables:
  - template: pipeline.variables.yml
  steps:
    - task: PublishBuildArtifacts@1
      displayName: Publish $(moduleName) Artifacts
      inputs:
        PathtoPublish: $(modulePath)
        ArtifactName: $(moduleName)-$(moduleVersion)
  
- job:
  displayName: Copy ${{ parameters.moduleName }}
  pool:
    ${{ if ne(variables['vmImage'], '') }}:
      vmImage: $(vmImage)
    ${{ if ne(variables['poolName'], '') }}:
      name: $(poolName)
  variables:
  - template: pipeline.variables.yml
  steps:
    - task: CopyFiles@2
      displayName: Filter folders
      inputs:
        Contents: |
          $(modulesPath)/$(moduleName)/$(moduleVersion)/**
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: AzureCLI@1
      displayName: Copy Module to $(componentStorageAccountName)
      enabled: true
      inputs:
        azureSubscription: $(serviceConnection)
        scriptLocation: inlineScript
        failOnStandardError: false
        inlineScript: |
          #!/bin/bash

          if [[ $(az storage account show --name $(componentStorageAccountName) --subscription "$(componentStorageAccountSubscriptionId)") = true ]]; then
              az storage container create --name "$(componentStorageContainerName)" \
              --public-access off \
              --account-name "$(componentStorageAccountName)" \
              --subscription "$(componentStorageAccountSubscriptionId)"

              az storage blob sync --container "$(componentStorageContainerName)" \
              --source "$(Build.ArtifactStagingDirectory)/$(modulesPath)/$(moduleName)/$(moduleVersion)" \
              --destination "$(modulesPath)/$(moduleName)/$(moduleVersion)" \
              --account-name "$(componentStorageAccountName)" \
              --subscription "$(componentStorageAccountSubscriptionId)"
              echo "$(moduleName) copied to $(componentStorageAccountName)"
              exit 1
          fi
          echo 1>&2 "Component storage account $(componentStorageAccountName) not found."
            