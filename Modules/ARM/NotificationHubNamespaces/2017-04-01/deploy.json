{
	"$schema": "http://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"authorizationRules": {
			"type": "array",
			"defaultValue": [
				{
					"name": "RootManageSharedAccessKey",
					"properties": {
						"rights": [
							"Listen",
							"Manage",
							"Send"
						]
					}
				}
			],
			"metadata": {
				"description": "Optional. Authorization Rules for the Event Hub namespace"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "The location in which the Notification Hubs resources should be deployed."
			}
		},
		"namespaceName": {
			"type": "String"
		},
		"notificationHubName": {
			"type": "String"
		},
		"sku": {
			"type": "String"
		},
		"diagnosticLogsRetentionInDays": {
			"type": "int",
			"defaultValue": 365,
			"minValue": 0,
			"maxValue": 365,
			"metadata": {
				"description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
			}
		},
		"diagnosticStorageAccountId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource identifier of the Diagnostic Storage Account."
			}
		},
		"workspaceId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource identifier of Log Analytics."
			}
		},
		"eventHubAuthorizationRuleId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
			}
		},
		"eventHubName": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
			}
		},
		"tags": {
			"defaultValue": {},
			"type": "Object"
		}
	},
	"variables": {
		"namespaceResourceId": "[resourceId('Microsoft.NotificationHubs/namespaces', parameters('namespaceName'))]",
		"diagnosticsLogs": [
			{
				"category": "OperationalLogs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			}
		]
	},
	"resources": [
		{
			"type": "Microsoft.NotificationHubs/namespaces",
			"apiVersion": "2017-04-01",
			"name": "[parameters('namespaceName')]",
			"location": "[parameters('location')]",
			"sku": {
				"name": "[parameters('sku')]"
			},
			"properties": {
				"name": "[parameters('namespaceName')]",
				"region": "[parameters('location')]",
				"namespaceType": "NotificationHub"
			},
			"resources": [
				{
					"type": "Microsoft.NotificationHubs/namespaces/providers/diagnosticsettings",
					"apiVersion": "2017-05-01-preview",
					"name": "[concat(parameters('namespaceName'), '/Microsoft.Insights/service')]",
					"condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
					"dependsOn": [
						"[concat('Microsoft.NotificationHubs/namespaces/', parameters('namespaceName'))]"
					],
					"properties": {
						"storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
						"workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
						"eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
						"eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
						"metrics": "[json('null')]",
						"logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
					}
				}
			]
		},
		{
			"type": "Microsoft.NotificationHubs/namespaces/notificationHubs",
			"apiVersion": "2017-04-01",
			"name": "[concat(parameters('namespaceName'),'/',parameters('notificationHubName'))]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.NotificationHubs/namespaces/', parameters('namespaceName'))]"
			],
			"tags": "[parameters('tags')]",
			"sku": {
				"name": "[parameters('sku')]"
			},
			"properties": {
				"name": "[parameters('notificationHubName')]"
			}
		},
		{
			"type": "Microsoft.NotificationHubs/namespaces/AuthorizationRules",
			"apiVersion": "2017-04-01",
			"name": "[concat(parameters('namespaceName'),'/', parameters('authorizationRules')[copyIndex()].name)]",
			"condition": "[greater(length(parameters('authorizationRules')),0)]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('namespaceResourceId')]"
			],
			"copy": {
				"name": "authorizationRules",
				"count": "[length(parameters('authorizationRules'))]"
			},
			"properties": {
				"rights": "[parameters('authorizationRules')[copyIndex()].properties.rights]"
			}
		}
	],
	"outputs": {},
	"functions": []
}