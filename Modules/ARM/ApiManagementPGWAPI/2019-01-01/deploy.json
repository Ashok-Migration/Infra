{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"apiManagementServiceName": {
			"metadata": {
				"description": "The name of the api management service"
			},
			"type": "string"
		},
		"apiName": {
			"metadata": {
				"description": "The name of the API being added"
			},
			"type": "string"
		},
		"apiDisplayName": {
			"metadata": {
				"description": "The display name of the API being added"
			},
			"type": "string"
		},
		"apiDescription": {
			"metadata": {
				"description": "The description of the API being added"
			},
			"type": "string"
		},
		"apiPath": {
			"metadata": {
				"description": "The path of the API being added"
			},
			"type": "string"
		},
		"subscriptionRequired": {
			"defaultValue": true,
			"metadata": {
				"description": "Specifies whether an API or Product subscription is required for accessing the API."
			},
			"type": "bool"
		},
		"serviceUrl": {
			"defaultValue": "",
			"metadata": {
				"description": "Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long."
			},
			"type": "string"
		},
		"apiPolicyLogicAppName": {
			"defaultValue": "",
			"metadata": {
				"description": "The name of the logic app in the backend."
			},
			"type": "string"
		},
		"apiPolicyLogicAppRG": {
			"defaultValue": "",
			"metadata": {
				"description": "The RG of the logic app in the backend."
			},
			"type": "string"
		},
		"openIdConfigUrl": {
			"type": "string",
			"metadata": {
				"description": "Open Id Config URL"
			}
		},
		"audienceId": {
			"type": "string",
			"metadata": {
				"description": "Client Id of app registered in b2c tenant"
			}
		},
		"issuerUrl": {
			"type": "string",
			"metadata": {
				"description": "The Issuer URL"
			}
		},
		"apiOperations": {
			"type": "array",
			"metadata": {
				"description": "A list of operations on the API."
			}
		}
	},
	"variables": {
		"basePolicy0": "<policies><inbound><base/><set-backend-service id=\"apim-generated-policy\" backend-id=\"<NAMEOFLOGICAPPBACKEND>\"/><set-method id=\"apim-generated-policy\">POST</set-method><set-variable name=\"requestPath\" value=\"@(context.Request.Url.Path)\"/><rewrite-uri id=\"apim-generated-policy\" template=\"/manual/paths/invoke/?api-version=2016-10-01&amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;sv=1.0&amp;sig=<SIGNATUREOFLOGICAPP>\"/><validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing or invalid.\"><openid-config url=\"<OPENIDCONFIGURL>\"/><audiences><audience><AUDIENCEGUID></audience></audiences><issuers><issuer><ISSUERURL></issuer></issuers></validate-jwt><set-header name=\"Authorization\" exists-action=\"override\"><value/></set-header><set-variable name=\"IAllowListNamdval\" value=\"{{PGWAPIAllowIPList}}\" /> <set-variable name=\"X-Forwarded-For-Value\" value=\"@{ string[] value1; if(context.Request.Headers.TryGetValue(\"X-Forwarded-For\", out value1)) {if(value1 != null && value1.Length > 0) {var forwardedForValue = value1[0]; return forwardedForValue.Split(',')[0];}} return null;}\"/> <set-variable name = \"AlwdIpFor\" value=\"@{var jsonval = (string)context.Variables.GetValueOrDefault<string>(\"IAllowListNamdval\"); var arr = jsonval.Contains((string)context.Variables.GetValueOrDefault<string>(\"X-Forwarded-For-Value\"));return arr;}\" /> <choose> <when condition =\"@(!(bool)context.Variables.GetValueOrDefault<bool>(\"AlwdIpFor\"))\"> <ip-filter action = \"allow\"> <address> @((string) context.Variables.GetValueOrDefault<string>(\"X-Forwarded-For-Value\"))</address> </ip-filter> </when> </choose> </inbound> <backend> <base/> </backend><outbound><base/> </outbound><on-error><base/> </on-error></policies> ",
		"basePolicy1": "[replace(variables('basePolicy0'),'<NAMEOFLOGICAPPBACKEND>',parameters('apiPolicyLogicAppName'))]",
		"basePolicy2": "[replace(variables('basePolicy1'),'<OPENIDCONFIGURL>',parameters('openIdConfigUrl'))]",
		"basePolicy3": "[replace(variables('basePolicy2'),'<AUDIENCEGUID>',parameters('audienceId'))]",
		"basePolicy4": "[replace(variables('basePolicy3'),'<ISSUERURL>',parameters('issuerUrl'))]",
		"policy": "[variables('basePolicy4')]",
		"logicAppResourceID": "[resourceId(subscription().subscriptionId,parameters('apiPolicyLogicAppRG'),'Microsoft.Logic/workflows/triggers',parameters('apiPolicyLogicAppName'), 'manual')]"
	},
	"resources": [
		{
			"name": "[concat(parameters('apiManagementServiceName'),'/',parameters('apiName'))]",
			"type": "Microsoft.ApiManagement/service/apis",
			"apiVersion": "2019-01-01",
			"properties": {
				"description": "[parameters('apiDescription')]",
				"path": "[parameters('apiPath')]",
				"type": "http",
				"subscriptionRequired": "[parameters('subscriptionRequired')]",
				"displayName": "[parameters('apiDisplayName')]",
				"serviceUrl": "[parameters('serviceUrl')]",
				"protocols": [
					"http",
					"https"
				]
			},
			"resources": [
				{
				"name": "[concat(parameters('apiManagementServiceName'),'/',parameters('apiName'),'/policy')]",
				"type": "Microsoft.ApiManagement/service/apis/policies",
				"apiVersion": "2019-01-01",
				"dependsOn": [
					"[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementServiceName'), parameters('apiName'))]"
				],
				"condition": "[and(not(empty(parameters('apiPolicyLogicAppName'))),not(empty(parameters('apiPolicyLogicAppRG'))))]",
				"properties": {
					"value": "[replace(variables('policy'),'<SIGNATUREOFLOGICAPP>', listCallbackUrl(variables('logicAppResourceID'),'2016-06-01').queries.sig)]",
					"format": "xml"
					}
				}
			]
		},
		{
			"name": "[concat(parameters('apiManagementServiceName'),'/',parameters('apiName'),'/',parameters('apiOperations')[copyIndex('operationscopy')].operationName)]",
			"copy": {
				"name": "operationscopy",
				"count": "[length(parameters('apiOperations'))]",
				"mode": "Serial"
			},
			"type": "Microsoft.ApiManagement/service/apis/operations",
			"apiVersion": "2019-01-01",
			"dependsOn": [
				"[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementServiceName'), parameters('apiName'))]"
			],
			"properties": {
				"description": "[parameters('apiOperations')[copyIndex('operationscopy')].description]",
				"displayName": "[parameters('apiOperations')[copyIndex('operationscopy')].displayName]",
				"method": "[parameters('apiOperations')[copyIndex('operationscopy')].method]",
				"urlTemplate": "[parameters('apiOperations')[copyIndex('operationscopy')].urlTemplate]"
			},
			"resources": []
		}
	],
	"functions": [],
	"outputs": {}
}