{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "enableNonSslPort": {
      "defaultValue": false,
      "metadata": {
        "description": "Set to true to allow access to redis on port 6379, without SSL tunneling (less secure)."
      },
      "type": "bool"
    },
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      },
      "type": "string"
    },
    "zones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Availability zones"
      }
    },
    "redisVersion": {
      "type": "string",
      "defaultValue": "4",
      "metadata": {
        "description": "Redis version"
      }
    },
    "replicasPerMaster": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Replicas per master."
      }
    },
    "redisCacheCapacity": {
      "allowedValues": [
        1,
        2,
        3,
        4
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The size of the new Azure Redis Cache instance. Valid family and capacity combinations are (C0..C6, P1..P4)."
      },
      "type": "int"
    },
    "redisCacheName": {
      "metadata": {
        "description": "The name of the Azure Redis Cache to create."
      },
      "type": "string"
    },
    "redisConfiguration": {
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Redis Configuration."
      },
      "type": "object"
    },
    "minimumTlsVersion": {
      "type": "string",
      "defaultValue": "1.2",
      "metadata": {
        "description": "Minimum TLS Version for Redis Instance"
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of the Diagnostic Storage Account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "tags": {
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Resource tags."
      },
      "type": "object"
    }
  },
  "variables": {
    "diagnosticsMetrics": [
      {
        "category": "AllMetrics",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ],
    "diagnosticsLogs": []
  },
  "resources": [
    {
      "type": "Microsoft.Cache/Redis",
      "apiVersion": "2020-06-01",
      "name": "[parameters('redisCacheName')]",
      "location": "[parameters('location')]",
      "zones": "[parameters('zones')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "enableNonSslPort": "[parameters('enableNonSslPort')]",
        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
        "redisVersion": "[parameters('redisVersion')]",
        "redisConfiguration": "[parameters('redisConfiguration')]",
        "replicasPerMaster": "[parameters('replicasPerMaster')]",
        "sku": {
          "capacity": "[parameters('redisCacheCapacity')]",
          "family": "P",
          "name": "Premium"
        }
      },
      "resources": [
        {
          "type": "Microsoft.Cache/Redis/providers/diagnosticsettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[concat(parameters('redisCacheName'), '/Microsoft.Insights/service')]",
          "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
          "dependsOn": [
            "[concat('Microsoft.Cache/Redis/', parameters('redisCacheName'))]"
          ],
          "properties": {
            "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
            "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
            "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
            "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
            "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
            "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
          }
        }
      ]
    }
  ],
  "outputs": {},
  "functions": []
}