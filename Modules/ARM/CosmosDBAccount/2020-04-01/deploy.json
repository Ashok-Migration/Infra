{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "accountName": {
      "type": "string",
      "defaultValue": "[concat('sql-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Cosmos DB account name, max length 44 characters"
      }
    },
    "automaticFailover": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Enable automatic failover for regions"
      }
    },
    "defaultConsistencyLevel": {
      "type": "string",
      "defaultValue": "Session",
      "allowedValues": [
        "Eventual",
        "ConsistentPrefix",
        "Session",
        "BoundedStaleness",
        "Strong"
      ],
      "metadata": {
        "description": "The default consistency level of the Cosmos DB account."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for the Cosmos DB account."
      }
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "minValue": 5,
      "defaultValue": 300,
      "maxValue": 86400,
      "metadata": {
        "description": "Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "minValue": 10,
      "defaultValue": 100000,
      "maxValue": 2147483647,
      "metadata": {
        "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
      }
    },
    "locations": {
      "type": "array",
      "defaultValue": [
        {
          "locationName": "[parameters('location')]",
          "failoverPriority": 0,
          "isZoneRedundant": false
        }
      ],
      "metadata": {
        "description": "Locations for geo-replication"
      }
    },
    "isVirtualNetworkFilterEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "To enable or disable virtual network filter."
      }
    },
    "virtualNetworkRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Virtual Network Rules."
      }
    },
    "ipRules": {
      "type": "array",
      "defaultValue": []
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of the Diagnostic Storage Account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "tags": {
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Resource tags."
      },
      "type": "object"
    }
  },
  "variables": {
    "accountName": "[toLower(parameters('accountName'))]",
    "consistencyPolicy": {
      "Eventual": {
        "defaultConsistencyLevel": "Eventual"
      },
      "ConsistentPrefix": {
        "defaultConsistencyLevel": "ConsistentPrefix"
      },
      "Session": {
        "defaultConsistencyLevel": "Session"
      },
      "BoundedStaleness": {
        "defaultConsistencyLevel": "BoundedStaleness",
        "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
        "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
      },
      "Strong": {
        "defaultConsistencyLevel": "Strong"
      }
    },
    "diagnosticsMetrics": [
      {
        "category": "Requests",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ],
    "diagnosticsLogs": [
      {
        "category": "DataPlaneRequests",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "MongoRequests",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "QueryRuntimeStatistics",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "PartitionKeyStatistics",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "PartitionKeyRUConsumption",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "ControlPlaneRequests",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "CassandraRequests",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      },
      {
        "category": "GremlinRequests",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('accountName')]",
      "apiVersion": "2021-01-15",
      "kind": "GlobalDocumentDB",
      "location": "[parameters('location')]",
      "properties": {
        "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
        "locations": "[parameters('locations')]",
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": "[parameters('automaticFailover')]",
        "isVirtualNetworkFilterEnabled": "[parameters('isVirtualNetworkFilterEnabled')]",
        "virtualNetworkRules": "[parameters('virtualNetworkRules')]",
        "ipRules": "[parameters('ipRules')]"
      },
      "resources": [
        {
          "type": "Microsoft.DocumentDB/databaseAccounts/providers/diagnosticsettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[concat(parameters('accountName'), '/Microsoft.Insights/service')]",
          "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
          "dependsOn": [
            "[concat('Microsoft.DocumentDB/databaseAccounts/', parameters('accountName'))]"
          ],
          "properties": {
            "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
            "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
            "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
            "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
            "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
            "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
          }
        }
      ],
      "tags": "[parameters('tags')]"
    }
  ],
  "functions": [],
  "outputs": {}
}