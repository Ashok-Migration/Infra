{
    "$schema": "http://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "alwaysOn": {
            "type": "bool"
        },
        "appConfigEndpoint": {
            "type": "string"
        },
        "appInsightsResourceId": {
            "type": "string"
        },
        "runtimeValue": {
            "type": "string"
        },
        "functionAppName": {
            "type": "string"
        },
        "hostingPlanName": {
            "type": "string"
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            },
            "type": "string"
        },
        "serviceBusSecretUri": {
            "type": "string"
        },
        "storageAccountName": {
            "type": "string"
        },
        "storageResourceGroup": {
            "type": "string"
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Optional. Resource tags."
            },
            "type": "object"
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The name of the virtual network to be created."
            }
        },
        "ipSecurityRestrictions": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "IP based access restrictions."
            }
        },
        "subnetResourceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "ResourceId of subnet."
            }
        },
        "blobAccountConnectionString": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "KeyVault reference for Connection String of blob account."
            }
        },
        "http20Enabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Configures a web site to allow clients to connect over http2.0."
            }
        },
        "ftpsState": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "State of FTP / FTPS service."
            }
        },
        "healthCheckPath": {
            "type": "string",
            "defaultValue": "/",
            "metadata": {
                "description": "Health check path."
            }
        }
    },
    "variables": {
        "blobAccountConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=',parameters('blobAccountConnectionString'),')')]",
        "serviceBusConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=',parameters('serviceBusSecretUri'),')')]",
        "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                    "days": "[parameters('diagnosticLogsRetentionInDays')]",
                    "enabled": true
                }
            }
        ],
        "diagnosticsLogs": [
            {
                "category": "FunctionAppLogs",
                "enabled": true,
                "retentionPolicy": {
                    "days": "[parameters('diagnosticLogsRetentionInDays')]",
                    "enabled": true
                }
            }
        ]
    },
    "resources": [
        {
            "apiVersion": "2020-09-01",
            "name": "[parameters('functionAppName')]",
            "type": "Microsoft.Web/sites",
            "kind": "functionapp",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [],
            "properties": {
                "name": "[parameters('functionAppName')]",
                "httpsOnly": true,
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AppConfig",
                            "value": "[parameters('appConfigEndpoint')]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(parameters('appInsightsResourceId'), '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(parameters('appInsightsResourceId'), '2015-05-01').ConnectionString]"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[variables('blobAccountConnectionString')]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "[parameters('runtimeValue')]"
                        },
                        {
                            "name": "ServiceBusConnectionString",
                            "value": "[variables('serviceBusConnectionString')]"
                        },
                        {
                            "name": "TimeInterval",
                            "value": "0 0 */12 * * *"
                        },
                        {
                            "name": "RefreshInterval",
                            "value": "0 0 0 * * *"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[variables('blobAccountConnectionString')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(parameters('functionAppName'))]"
                        }
                    ],
                    "alwaysOn": "[parameters('alwaysOn')]",
                    "ipSecurityRestrictions": "[parameters('ipSecurityRestrictions')]",
                    "vnetName": "[parameters('vnetName')]",
                    "http20Enabled": "[parameters('http20Enabled')]",
                    "ftpsState": "[parameters('ftpsState')]",
                    "healthCheckPath": "[parameters('healthCheckPath')]"

                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "clientAffinityEnabled": true
            },
            "resources": [
                {
                    "type": "Microsoft.Web/sites/providers/diagnosticsettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('functionAppName'), '/Microsoft.Insights/service')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', parameters('functionAppName'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
                    }
                },
                {
                    "name": "[concat(parameters('functionAppName'), '/virtualNetwork')]",
                    "type": "Microsoft.Web/sites/networkConfig",
                    "apiVersion": "2020-09-01",
                    "condition": "[not(empty(parameters('vnetName')))]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[parameters('subnetResourceId')]",
                        "swiftSupported": true
                    }
                }
            ]
        }
    ],
    "functions": [],
    "outputs": {}
}