parameters:
  templateFile: $(modulePath)/deploy.json
  parametersFile: $(modulePath)/Parameters/parameters.json

jobs:
  - job: ValidateModule
    displayName: Validate Module
    pool:
       name: tasmuagents
      # vmImage: $(vmImage)
    variables:
      - template: pipeline.variables.yml
    steps:
      - task: PowerShell@2
        displayName: Test Module $(moduleName) (Pester)
        inputs:
          targetType: inline
          script: |
            Install-Module -Name Pester -RequiredVersion 5.0.2 -Force -ErrorAction Stop


            $PesterSettings  = @{
              Script       = "$(System.DefaultWorkingDirectory)/$(modulePath)/Tests/*.tests.ps1"
              OutputFile   = "$(Agent.WorkFolder)/testsresult.xml"
              OutputFormat = "NUnitXml"
              EnableExit   = $true
              Verbose      = $true
            }

            Invoke-Pester @PesterSettings
          pwsh: true

      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: $(Agent.WorkFolder)/testsresult.xml

      - task: AzurePowerShell@4
        displayName: "Validate $(moduleName) in $(resourceGroupNamePrd) via $(serviceConnectionPrd)"
        inputs:
          azureSubscription: $(serviceConnectionPrd)
          ScriptType: InlineScript
          inline: |
            $ValidationErrors = $null

            $Location = "$(location)" -replace " ",""

            $DeploymentInputs = @{
              Location              = "$Location"
              TemplateFile          = "$(Build.Repository.LocalPath)/${{ parameters.templateFile }}"
              TemplateParameterFile = "$(Build.Repository.LocalPath)/${{ parameters.parametersFile }}"
              Verbose               = $true
              OutVariable           = "ValidationErrors"
            }

            Test-AzDeployment @DeploymentInputs

            if ($ValidationErrors)
            {
                  foreach ($message in $ValidationErrors.Details)
                  {
                      Write-Error $message.Message
                  }
                  Write-Error "Template is not valid."
            }
          azurePowerShellVersion: LatestVersion
