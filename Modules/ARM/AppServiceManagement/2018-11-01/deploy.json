{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {  
        "webAppName": {
            "type": "String"
        },
        "hostingPlanId": {
            "type": "String"
        },
        "allowedOriginEndpoint":{
            "type": "string",
            "metadata": {
                "description": "Specifies the url which need to be added as CORS origin header so that client is able to access this resource."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "tags": {
          "defaultValue": {},
          "metadata": {
            "description": "Optional. Resource tags."
          },
          "type": "object"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources"
            }
        }
    },
    "variables": {
      "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            }
        ],
        "diagnosticsLogs": [
            {
                "category": "AppServiceAntivirusScanAuditLogs",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            },
            {
                "category": "AppServiceHTTPLogs",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            },
            {
                "category": "AppServiceConsoleLogs",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            },
            {
                "category": "AppServiceAppLogs",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            },
            {
                "category": "AppServiceFileAuditLogs",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            },
            {
                "category": "AppServiceAuditLogs",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            },
            {
                "category": "AppServiceIPSecAuditLogs",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            },
            {
                "category": "AppServicePlatformLogs",
                "enabled": true,
                "retentionPolicy": {
                "days": "[parameters('diagnosticLogsRetentionInDays')]",
                "enabled": true
                }
            }
        ]
    },
    "resources": [        
    {
      "comments": "Web app",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-02-01",
      "name": "[parameters('webAppName')]",
      "location": "[parameters('location')]",
      "properties": {
        "enabled": true,
        "name": "[parameters('webAppName')]",
        "hostingEnvironment": "",
        "serverFarmId": "[parameters('hostingPlanId')]",
        "httpsOnly": true,
        "siteConfig": {
          "AlwaysOn": true,
          "detailedErrorLoggingEnabled": true,
          "httpLoggingEnabled": true,
          "requestTracingEnabled": true,
          "cors": {
            "allowedOrigins": [
              "https://qnamaker-service.trafficmanager.net",
              "https://www.qnamaker.ai",
              "https://directline.botframework.com",
              "[parameters('allowedOriginEndpoint')]"
            ]
          }
        }
      },
      "resources": [
          {
              "type": "Microsoft.Web/sites/providers/diagnosticsettings",
              "apiVersion": "2017-05-01-preview",
              "name": "[concat(parameters('webAppName'), '/Microsoft.Insights/service')]",
              "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
              "dependsOn": [
                  "[concat('Microsoft.Web/sites/', parameters('webAppName'))]"
              ],
              "properties": {
                  "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                  "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                  "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                  "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                  "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
                  "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
              }
          }
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
      ],
    "tags": "[parameters('tags')]"
    }
    ],
    "functions": [],
    "outputs": {        
    }
}