# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger: none

schedules:
  - cron: "0 0 * * *"
    displayName: Daily UTC midnight build
    branches:
      include:
        - master
    always: true

pool:
  name: "tasmumsiagents"

variables:
  workingDirectory: "marketplace/marketplace"
  workingDirectoryEservices: "marketplace/eservices"
  workingDirectoryAccount: "marketplace/account"
  workingDirectoryNews: "marketplace/news"
  workingDirectoryProductAndService: "marketplace/productAndService"
  workingDirectorySupport: "marketplace/support"
  workingDirectoryAbout: "marketplace/aboutTasmu"
  workingDirectoryMyaccount: "marketplace/my-account"
  buildConfiguration: "Release"
  buildPlatform: "Any CPU"
  solutionFiles: "**/**.sln"

jobs:
  - job: SonarPipeline
    displayName: Sonar Pipeline
    timeoutInMinutes: 220
    steps:
      - task: EnterpriseServicesDevOpsTeam.BuildTool-Tasks.task-ESDevopsCIConfig.ServicesDevOpsBuildConfig@6
        displayName: ServicesDevOpsBuildConfig
        inputs:
          ServicesDevOpsServiceEndpoint: ServicesBuildEndPoint
          CASuppressionsEnabled: false
          ISGEnabled: false
          AIScannerEnabled: true
          emailto: "$(emailto)"

      - task: CredScan@2
        displayName: "Run CredScan"
        inputs:
          debugMode: false

      - task: EnterpriseServicesDevOpsTeam.BuildTool-Tasks.task-ServicesDevopsAddToSonarNSG.ServicesDevOpsSonarPreReq@5
        displayName: "T-ServicesDevOpsSonarPreReq:"

      - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
        displayName: "Prepare analysis on SonarQube"
        inputs:
          SonarQube: "ServiceSonar-CORP"
          scannerMode: CLI
          configMode: manual
          cliProjectKey: "TASMUCP_web-apps_master"
          cliProjectName: "TASMUCP_web-apps_master_#MA"
          extraProperties: |
            sonar.exclusions=**/stylecop.json
            sonar.ps.plugin.skip=true
            sonar.issue.ignore.multicriteria=e1,e2,e3,e4,e5,e6
            sonar.issue.ignore.multicriteria.e1.ruleKey=Web:MouseEventWithoutKeyboardEquivalentCheck
            sonar.issue.ignore.multicriteria.e1.resourceKey=**/*.html
            sonar.issue.ignore.multicriteria.e2.ruleKey=Web:InternationalizationCheck
            sonar.issue.ignore.multicriteria.e2.resourceKey=**/*.html
            sonar.issue.ignore.multicriteria.e3.ruleKey=Web:ImgWithoutWidthOrHeightCheck
            sonar.issue.ignore.multicriteria.e3.resourceKey=**/*.html
            sonar.issue.ignore.multicriteria.e4.ruleKey=Web:MaxLineLengthCheck
            sonar.issue.ignore.multicriteria.e4.resourceKey=**/*.html
            sonar.issue.ignore.multicriteria.e5.ruleKey=common-web:InsufficientCommentDensity
            sonar.issue.ignore.multicriteria.e5.resourceKey=**/*.html
            sonar.issue.ignore.multicriteria.e6.ruleKey=Web:HeaderCheck
            sonar.issue.ignore.multicriteria.e6.resourceKey=**/*.html
            sonar.javascript.lcov.reportPaths = $(workingDirectory)/coverage/lcov.info,$(workingDirectoryEservices)/coverage/lcov.info,$(workingDirectoryNews)/coverage/lcov.info,$(workingDirectoryProductAndService)/coverage/lcov.info,$(workingDirectorySupport)/coverage/lcov.info,$(workingDirectoryAbout)/coverage/lcov.info,$(workingDirectoryMyaccount)/coverage/lcov.info,$(workingDirectoryAccount)/coverage/lcov.info

      - task: NodeTool@0
        displayName: "Use Node 10.x"
        inputs:
          versionSpec: 10.x

      # Markeplace build

      - task: Npm@1
        displayName: "npm install Marketplace"
        inputs:
          workingDir: $(workingDirectory)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: Npm@1
        displayName: "install cli"
        inputs:
          command: custom
          workingDir: $(workingDirectory)
          verbose: false
          customCommand: "install @angular/cli@9.1.5 -g -f"

      - script: "npm run build-prod"
        workingDirectory: $(workingDirectory)
        displayName: "npm run build-prod"

      - task: DeleteFiles@1
        displayName: "Delete JUnit files"
        inputs:
          SourceFolder: $(workingDirectory)/junit
          Contents: "TESTS*.xml"

      - task: Npm@1
        displayName: "Test Angular"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectory)

      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage Angular results"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(workingDirectory)/coverage/cobertura-coverage.xml"
          reportDirectory: $(workingDirectory)/coverage
          failIfCoverageEmpty: false

      - task: PublishTestResults@2
        displayName: "Publish Angular test results"
        inputs:
          searchFolder: $(workingDirectory)/junit
          testRunTitle: Angular
          testResultsFormat: JUnit
          testResultsFiles: "TESTS*.xml"

      - task: Npm@1
        displayName: "npm install Eservices"
        inputs:
          workingDir: $(workingDirectoryEservices)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: Npm@1
        displayName: "install cli"
        inputs:
          command: custom
          workingDir: $(workingDirectoryEservices)
          verbose: false
          customCommand: "install @angular/cli@9.1.5 -g -f"

      - script: "npm run build-prod"
        workingDirectory: $(workingDirectoryEservices)
        displayName: "npm run build-prod"

      - task: DeleteFiles@1
        displayName: "Delete JUnit files"
        inputs:
          SourceFolder: $(workingDirectoryEservices)/junit
          Contents: "TESTS*.xml"

      - task: Npm@1
        displayName: "Test Angular"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectoryEservices)

      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage Angular results"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(workingDirectoryEservices)/coverage/cobertura-coverage.xml"
          reportDirectory: $(workingDirectoryEservices)/coverage
          failIfCoverageEmpty: false

      - task: PublishTestResults@2
        displayName: "Publish Angular test results"
        inputs:
          searchFolder: $(workingDirectoryEservices)/junit
          testRunTitle: Angular
          testResultsFormat: JUnit
          testResultsFiles: "TESTS*.xml"
      
      - task: Npm@1
        displayName: "npm install Account"
        inputs:
          workingDir: $(workingDirectoryAccount)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: Npm@1
        displayName: "install cli"
        inputs:
          command: custom
          workingDir: $(workingDirectoryAccount)
          verbose: false
          customCommand: "install @angular/cli@9.1.5 -g -f"

      - script: "npm run build-prod"
        workingDirectory: $(workingDirectoryAccount)
        displayName: "npm run build-prod"

      - task: DeleteFiles@1
        displayName: "Delete JUnit files"
        inputs:
          SourceFolder: $(workingDirectoryAccount)/junit
          Contents: "TESTS*.xml"

      - task: Npm@1
        displayName: "Test Angular"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectoryAccount)

      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage Angular results"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(workingDirectoryAccount)/coverage/cobertura-coverage.xml"
          reportDirectory: $(workingDirectoryAccount)/coverage
          failIfCoverageEmpty: false

      - task: PublishTestResults@2
        displayName: "Publish Angular test results"
        inputs:
          searchFolder: $(workingDirectoryAccount)/junit
          testRunTitle: Angular
          testResultsFormat: JUnit
          testResultsFiles: "TESTS*.xml"

      - task: Npm@1
        displayName: "npm install News"
        inputs:
          workingDir: $(workingDirectoryNews)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - script: "ng build --prod"
        workingDirectory: $(workingDirectoryNews)
        displayName: "ng build News"

      - task: DeleteFiles@1
        displayName: "Delete JUnit News files"
        inputs:
          SourceFolder: $(workingDirectoryNews)/projects/tasmu-news/junit
          Contents: "TESTS*.xml"

      - task: Npm@1
        displayName: "Test Angular News"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectoryNews)

      - task: PublishCodeCoverageResults@1
        displayName: "Publish News code coverage Angular results"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(workingDirectoryNews)/coverage/cobertura-coverage.xml"
          reportDirectory: $(workingDirectoryNews)/coverage
          failIfCoverageEmpty: false

      - task: PublishTestResults@2
        displayName: "Publish Angular(News) test results"
        inputs:
          searchFolder: $(workingDirectoryNews)/projects/tasmu-news/junit
          testRunTitle: Angular
          testResultsFormat: JUnit
          testResultsFiles: "TESTS*.xml"

      - task: Npm@1
        displayName: "npm install About"
        inputs:
          workingDir: $(workingDirectoryAbout)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - script: "ng build --prod"
        workingDirectory: $(workingDirectoryAbout)
        displayName: "ng build About"

      - task: DeleteFiles@1
        displayName: "Delete JUnit About files"
        inputs:
          SourceFolder: $(workingDirectoryAbout)/projects/tasmu-about/junit
          Contents: "TESTS*.xml"

      - task: Npm@1
        displayName: "Test Angular About"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectoryAbout)

      - task: PublishCodeCoverageResults@1
        displayName: "Publish About code coverage Angular results"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(workingDirectoryAbout)/coverage/cobertura-coverage.xml"
          reportDirectory: $(workingDirectoryAbout)/coverage
          failIfCoverageEmpty: false

      - task: PublishTestResults@2
        displayName: "Publish Angular(About) test results"
        inputs:
          searchFolder: $(workingDirectoryAbout)/projects/tasmu-about/junit
          testRunTitle: Angular
          testResultsFormat: JUnit
          testResultsFiles: "TESTS*.xml"

      - task: Npm@1
        displayName: "npm install myaccount"
        inputs:
          workingDir: $(workingDirectoryMyaccount)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - script: "ng build --prod"
        workingDirectory: $(workingDirectoryMyaccount)
        displayName: "ng build myaccount"

      - task: DeleteFiles@1
        displayName: "Delete JUnit my account files"
        inputs:
          SourceFolder: $(workingDirectoryMyaccount)/projects/tasmu-myaccount/junit
          Contents: "TESTS*.xml"

      - task: Npm@1
        displayName: "Test Angular myaccount"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectoryMyaccount)

      - task: PublishCodeCoverageResults@1
        displayName: "Publish my account code coverage Angular results"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(workingDirectoryMyaccount)/coverage/cobertura-coverage.xml"
          reportDirectory: $(workingDirectoryMyaccount)/coverage
          failIfCoverageEmpty: false

      - task: PublishTestResults@2
        displayName: "Publish Angular(my account) test results"
        inputs:
          searchFolder: $(workingDirectoryMyaccount)/projects/tasmu-myaccount/junit
          testRunTitle: Angular
          testResultsFormat: JUnit
          testResultsFiles: "TESTS*.xml"

      - task: Npm@1
        displayName: "npm install Product And Service"
        inputs:
          workingDir: $(workingDirectoryProductAndService)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - script: "ng build --prod"
        workingDirectory: $(workingDirectoryProductAndService)
        displayName: "ng build Product And Service"

      - task: DeleteFiles@1
        displayName: "Delete JUnit Product And Service files"
        inputs:
          SourceFolder: $(workingDirectoryProductAndService)/projects/products-and-services/junit
          Contents: "TESTS*.xml"

      - task: Npm@1
        displayName: "Test Angular Product And Service"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectoryProductAndService)

      - task: PublishCodeCoverageResults@1
        displayName: "Publish Product And Service code coverage Angular results"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(workingDirectoryProductAndService)/coverage/cobertura-coverage.xml"
          reportDirectory: $(workingDirectoryProductAndService)/coverage
          failIfCoverageEmpty: false

      - task: PublishTestResults@2
        displayName: "Publish Angular(Product And Service)  test results"
        inputs:
          searchFolder: $(workingDirectoryProductAndService)/projects/products-and-services/junit
          testRunTitle: Angular
          testResultsFormat: JUnit
          testResultsFiles: "TESTS*.xml"

      - task: Npm@1
        displayName: "npm install Support"
        inputs:
          workingDir: $(workingDirectorySupport)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - script: "ng build --prod"
        workingDirectory: $(workingDirectorySupport)
        displayName: "ng build Support"

      - task: DeleteFiles@1
        displayName: "Delete JUnit Support files"
        inputs:
          SourceFolder: $(workingDirectorySupport)/projects/tasmu-support/junit
          Contents: "TESTS*.xml"

      - task: Npm@1
        displayName: "Test Angular Support"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectorySupport)

      - task: PublishCodeCoverageResults@1
        displayName: "Publish Support code coverage Angular results"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(workingDirectorySupport)/coverage/cobertura-coverage.xml"
          reportDirectory: $(workingDirectorySupport)/coverage
          failIfCoverageEmpty: false

      - task: PublishTestResults@2
        displayName: "Publish Angular(Support) test results"
        inputs:
          searchFolder: $(workingDirectorySupport)/projects/tasmu-support/junit
          testRunTitle: Angular
          testResultsFormat: JUnit
          testResultsFiles: "TESTS*.xml"

      - task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
        displayName: "Complete the SonarQube analysis"

      - task: EnterpriseServicesDevOpsTeam.BuildTool-Tasks.task-ServicesDevopsRemoveFromNSG.ServicesDevOpsSonarPreReqComplete@5
        displayName: "T-ServicesDevOpsSonarPreReqComplete:"

      - task: WhiteSource Bolt@20
        displayName: "Run WhiteSource Bolt"
        inputs:
          cwd: "$(System.DefaultWorkingDirectory)"

      - task: EnterpriseServicesDevOpsTeam.BuildTool-Tasks.task-ESDevopsCopyReports.ServicesDevOpsCopyReports@5
        displayName: ServicesDevOpsCopyReports

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: BuildLogFolder"
        inputs:
          PathtoPublish: '$(Agent.BuildDirectory)\BuildLogFolder'
          ArtifactName: BuildLogFolder
        condition: always()
