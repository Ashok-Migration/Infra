trigger: none
resources:
  repositories:
    - repository: web-apps # The name used to reference this repository in the checkout step
      type: git
      name: TASMU Central Platform/web-apps
      ref: skasani/dotnetupdate_authorizeCard

variables:
  workingDirectory: "marketplace/marketplace"
  workingDirectoryEservices: "marketplace/eservices"
  workingDirectoryAccount: "marketplace/account"
  poolName: "tasmumsagents"
  adminSolutionPath: "adminportal/Mcs.Tasmu.Portal.Admin.sln"
  powerbiSolutionPath: "powerbiembed/Mcs.Tasmu.Portal.PowerBIEmbed.sln"
  BuildConfiguration: "Release"
  BuildPlatform: "Any CPU"
  authorizecardSolutionPath: "authorizecard/Mcs.Tasmu.Portal.Authorizecard.sln"

jobs:
  - job: Get_Build_Queue
    pool:
      name: $(poolName)
    steps:
      - task: PowerShell@2
        name: setBuildQueue
        inputs:
          targetType: filePath
          filePath: "pipelines/build/get-service-queue.ps1"
        displayName: "Get Webapps Build Queue"

  - job: MarketPlace_Portal_Job
    displayName: MarketPlace Portal Job
    dependsOn: Get_Build_Queue
    condition: and(succeeded(), contains(dependencies.Get_Build_Queue.outputs['setBuildQueue.buildQueue'], 'marketPlace'))
    pool:
      name: $(poolName)
    steps:
      - task: NodeTool@0
        displayName: "Use Node 12.x"
        inputs:
          versionSpec: 12.x

      - task: Npm@1
        displayName: "npm install"
        inputs:
          workingDir: $(workingDirectory)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: Npm@1
        displayName: "install cli"
        inputs:
          command: custom
          workingDir: $(workingDirectory)
          verbose: false
          customCommand: "install @angular/cli@9.1.5 -g -f"

      - script: "npm run build-prod"
        workingDirectory: $(workingDirectory)
        displayName: "npm run build-prod"

      - task: Npm@1
        displayName: "Test Angular"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectory)
  
  - job: Account_Portal_Job
    displayName: Account Portal Job
    dependsOn: Get_Build_Queue
    condition: and(succeeded(), contains(dependencies.Get_Build_Queue.outputs['setBuildQueue.buildQueue'], 'accountportal'))
    pool:
      name: $(poolName)
    steps:
      - task: NodeTool@0
        displayName: "Use Node 12.x"
        inputs:
          versionSpec: 12.x
        
      - task: Npm@1
        displayName: "npm install"
        inputs:
          workingDir: $(workingDirectoryAccount)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: Npm@1
        displayName: "install cli"
        inputs:
          command: custom
          workingDir: $(workingDirectoryAccount)
          verbose: false
          customCommand: "install @angular/cli@9.1.5 -g -f"

      - script: "npm run build-prod"
        workingDirectory: $(workingDirectoryAccount)
        displayName: "npm run build-prod"

      - task: Npm@1
        displayName: "Test Angular"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectoryAccount)

  - job: Eservices_Portal_Job
    displayName: Eservices Portal Job
    dependsOn: Get_Build_Queue
    condition: and(succeeded(), contains(dependencies.Get_Build_Queue.outputs['setBuildQueue.buildQueue'], 'eservices'))
    pool:
      name: $(poolName)
    steps:
      - task: NodeTool@0
        displayName: "Use Node 12.x"
        inputs:
          versionSpec: 12.x

      - task: Npm@1
        displayName: "npm install"
        inputs:
          workingDir: $(workingDirectoryEservices)
          verbose: false
          customRegistry: "useFeed"
          customFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: Npm@1
        displayName: "install cli"
        inputs:
          command: custom
          workingDir: $(workingDirectoryEservices)
          verbose: false
          customCommand: "install @angular/cli@9.1.5 -g -f"

      - script: "npm run build-prod"
        workingDirectory: $(workingDirectoryEservices)
        displayName: "npm run build-prod"

      - task: Npm@1
        displayName: "Test Angular"
        inputs:
          command: custom
          customCommand: run test -- --watch=false --code-coverage
          workingDir: $(workingDirectoryEservices)
          

  - job: Admin_Portal_Job
    displayName: Admin Portal Job
    dependsOn: Get_Build_Queue
    condition: and(succeeded(), contains(dependencies.Get_Build_Queue.outputs['setBuildQueue.buildQueue'], 'admin'))
    pool:
      name: $(poolName)
    steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core sdk 3.1.x"
        inputs:
          packageType: "sdk"
          version: "3.1.x"

      - task: DotNetCoreCLI@2
        displayName: "dotnet restore"
        inputs:
          command: "restore"
          projects: "$(adminSolutionPath)"
          feedsToUse: "select"
          vstsFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: VSBuild@1
        inputs:
          solution: "$(adminSolutionPath)"
          vsVersion: "16.0"
          msbuildArgs: '/p:OutputPath="$(Build.BinariesDirectory)\$(buildConfiguration)/" /p:OutDir="$(Build.BinariesDirectory)\$(buildConfiguration)\\" /p:ReferencesLogFolder=$(Agent.BuildDirectory) /p:GenerateProjectSpecificOutputFolder=true /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(Build.BinariesDirectory)\$(buildConfiguration)\\"'
          platform: "$(buildPlatform)"
          configuration: "$(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: "**/*[Tt]est*/**/*.csproj"
          arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "Code Coverage"'

  - job: PowerBI_Embed_Job
    displayName: PowerBI Embed Job
    dependsOn: Get_Build_Queue
    condition: and(succeeded(), contains(dependencies.Get_Build_Queue.outputs['setBuildQueue.buildQueue'], 'powerbiembed'))
    pool:
      name: $(poolName)
    steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core sdk 3.1.x"
        inputs:
          packageType: "sdk"
          version: "3.1.x"

      - task: DotNetCoreCLI@2
        displayName: "dotnet restore"
        inputs:
          command: "restore"
          projects: "$(powerbiSolutionPath)"
          feedsToUse: "select"
          vstsFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: VSBuild@1
        inputs:
          solution: "$(powerbiSolutionPath)"
          vsVersion: "16.0"
          msbuildArgs: '/p:OutputPath="$(Build.BinariesDirectory)\$(buildConfiguration)/" /p:OutDir="$(Build.BinariesDirectory)\$(buildConfiguration)\\" /p:ReferencesLogFolder=$(Agent.BuildDirectory) /p:GenerateProjectSpecificOutputFolder=true /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(Build.BinariesDirectory)\$(buildConfiguration)\\"'
          platform: "$(buildPlatform)"
          configuration: "$(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: "**/*[Tt]est*/**/*.csproj"
          arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "Code Coverage"'

  - job: authorizecard_Portal_Job
    displayName: authorizecard Portal Job
    dependsOn: Get_Build_Queue
    condition: and(succeeded(), contains(dependencies.Get_Build_Queue.outputs['setBuildQueue.buildQueue'], 'authorizecard'))
    pool:
      name: $(poolName)
    steps:
      - task: UseDotNet@2
        displayName: "Use .NET Core sdk 6.0.x"
        inputs:
          packageType: "sdk"
          version: "6.0.x"

      - task: DotNetCoreCLI@2
        displayName: "dotnet restore"
        inputs:
          command: "restore"
          projects: "$(authorizecardSolutionPath)"
          feedsToUse: "select"
          vstsFeed: "d0902a05-fe88-4eb4-bab4-badafc58ebfa/f333d4e3-324a-45e6-9c13-ccc90b82eac4"

      - task: VSBuild@1
        inputs:
          solution: "$(authorizecardSolutionPath)"
          vsVersion: "17.0"
          msbuildArgs: '/p:OutputPath="$(Build.BinariesDirectory)\$(buildConfiguration)/" /p:OutDir="$(Build.BinariesDirectory)\$(buildConfiguration)\\" /p:ReferencesLogFolder=$(Agent.BuildDirectory) /p:GenerateProjectSpecificOutputFolder=true /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(Build.BinariesDirectory)\$(buildConfiguration)\\"'
          platform: "$(buildPlatform)"
          configuration: "$(buildConfiguration)"

  - template: templates/build-apps.yml
    parameters:
      name: productAndService
      workingDirectory: "marketplace/productAndService"

  - template: templates/build-apps.yml
    parameters:
      name: support
      workingDirectory: "marketplace/support"
  
  - template: templates/build-apps.yml
    parameters:
      name: news
      workingDirectory: "marketplace/news"

  - template: templates/build-apps.yml
    parameters:
      name: about
      workingDirectory: "marketplace/aboutTasmu"      
  
  - template: templates/build-apps.yml
    parameters:
      name: myaccount
      workingDirectory: "marketplace/my-account"      

  - template: templates/build-apps.yml
    parameters:
      name: commonui
      workingDirectory: "marketplace/common-ui"