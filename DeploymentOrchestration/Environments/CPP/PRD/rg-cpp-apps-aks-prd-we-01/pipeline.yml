name: $(resourceGroupName)

variables:
  - name: PoolName
    value: "tasmumsiprdagents"
  - name: templateFilePath
    value: DeploymentOrchestration/Environments/CPP/PRD/rg-cpp-apps-aks-prd-we-01/deploy.json
  - name: parameterFilePath
    value:
  - name: location
    value: westeurope
  - name: resourceGroupName
    value: rg-cpp-apps-aks-prd-we-01
  - name: serviceConnection
    value: sqcp-ado-spn-prd
  - name: subscriptionId
    value: 8964f3c1-44f5-4094-80eb-4334845bdfb1
  - name: clusterName
    value: aks-cpp-apps-prd-we-01
  - name: kubernetesVersion
    value: 1.18.17
  - name: nodeCount
    value: 10
  - name: minCount
    value: 10
  - name: maxCount
    value: 20
  - name: maxPods
    value: 30
  - name: nodeVMSize
    value: Standard_D4s_v3
  - name: zones
    value: 1 2 3

trigger: none

stages:
  - stage: Validate
    jobs:
      - job: ValidateTemplate
        displayName: Validate Template
        pool:
          name: $(PoolName)
        steps:
          - task: AzurePowerShell@4
            displayName: Validate template on $(resourceGroupName)
            inputs:
              azureSubscription: $(serviceConnection)
              ScriptType: InlineScript
              inline: |
                $ValidationErrors = $null

                $Location = "$(location)" -replace " ",""

                $DeploymentInputs = @{
                  Location              = "$Location"
                  TemplateFile          = "$(Build.Repository.LocalPath)/$(templateFilePath)"
                  # TemplateParameterFile = "$(Build.Repository.LocalPath)/$(parameterFilePath)"
                  Verbose               = $true
                  OutVariable           = "ValidationErrors"
                }

                Test-AzDeployment @DeploymentInputs

                if ($ValidationErrors)
                {
                  Write-Error "Template is not valid."
                }
              azurePowerShellVersion: LatestVersion

  - stage: DeployManagedCluster
    jobs:
      - job: DeployManagedCluster
        displayName: Update Node Pools
        timeoutInMinutes: 120
        pool:
          name: $(PoolName)
        steps:
          - task: AzureCLI@2
            displayName: "Upgrade to $(kubernetesVersion)"
            inputs:
              azureSubscription: "$(serviceConnection)"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                currentVersion=$(az aks get-upgrades -g $(resourceGroupName) -n $(clusterName) --query "controlPlaneProfile.kubernetesVersion" -o tsv)

                if [[ "$currentVersion" != $(kubernetesVersion) ]]

                then az aks upgrade --resource-group $(resourceGroupName) --name $(clusterName) --kubernetes-version $(kubernetesVersion) --yes

                else echo "version update not required"

                fi

          - task: AzureCLI@2
            displayName: "Add portal nodepool"
            inputs:
              azureSubscription: "$(serviceConnection)"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                portalPool=$(az aks nodepool list --cluster-name $(clusterName) -g $(resourceGroupName) --query "[?name=='portal'].name" -o tsv)

                if [[ "$portalPool" != portal ]]

                then az aks nodepool add --cluster-name $(clusterName) --name portal -g $(resourceGroupName) --enable-cluster-autoscaler --mode System --node-count $(nodeCount) --max-count $(maxCount) --min-count $(minCount) --max-pods $(maxPods) --node-osdisk-size 0 --node-vm-size $(nodeVMSize) --zones $(zones) --node-osdisk-type Linux

                else echo "portal node pool already exists"

                fi

  - stage: DeployTemplate
    jobs:
      - job: DeployTemplate
        displayName: Deploy Template
        timeoutInMinutes: 90
        pool:
          name: $(PoolName)
        steps:
          - task: AzurePowerShell@4
            displayName: Deploy template on $(resourceGroupName)
            inputs:
              azureSubscription: $(serviceConnection)
              ScriptType: InlineScript
              inline: |
                $Location = "$(location)" -replace " ",""

                $DeploymentInputs = @{
                  Name                    = "$(resourceGroupName)-master"
                  Location                = "$Location"
                  TemplateFile            = "$(Build.Repository.LocalPath)/$(templateFilePath)"
                  # TemplateParameterFile  = "$(Build.Repository.LocalPath)/$(parameterFilePath)"
                  DeploymentDebugLogLevel = "All"
                  Verbose                 = $true
                  ErrorAction             = "Stop"
                }
                New-AzDeployment @DeploymentInputs
              azurePowerShellVersion: LatestVersion
